# -*- coding: utf-8 -*-
"""HackOS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zv3cp3-fRmP2q2-55nol01hq3GGfztGo
"""

import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.models as models
from torch.utils.data import Dataset, DataLoader
import requests
from PIL import Image
from io import BytesIO
from tqdm.notebook import tqdm, trange

# Ensure necessary libraries are installed in Colab
from pathlib import Path
from io import BytesIO
import requests
import imageio.v3 as iio
import numpy as np

# Device configuration
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

"""# Dataset"""

LIST_OF_BICYCLES = [
    "http://images.cocodataset.org/train2017/000000483108.jpg",
    "http://images.cocodataset.org/train2017/000000293802.jpg",
    "http://images.cocodataset.org/train2017/000000079841.jpg",
    "http://images.cocodataset.org/train2017/000000515289.jpg",
    "http://images.cocodataset.org/train2017/000000562150.jpg",
    "http://images.cocodataset.org/train2017/000000412151.jpg",
    "http://images.cocodataset.org/train2017/000000462565.jpg",
    "http://images.cocodataset.org/train2017/000000509822.jpg",
    "http://images.cocodataset.org/train2017/000000321107.jpg",
    "http://images.cocodataset.org/train2017/000000061181.jpg",
    "http://images.cocodataset.org/train2017/000000018783.jpg",
    "http://images.cocodataset.org/train2017/000000012896.jpg",
    "http://images.cocodataset.org/train2017/000000465692.jpg",
    "http://images.cocodataset.org/train2017/000000391584.jpg",
    "http://images.cocodataset.org/train2017/000000241350.jpg",
    "http://images.cocodataset.org/train2017/000000438024.jpg",
    "http://images.cocodataset.org/train2017/000000442726.jpg",
    "http://images.cocodataset.org/train2017/000000435937.jpg",
    "http://images.cocodataset.org/train2017/000000292819.jpg",
    "http://images.cocodataset.org/train2017/000000157416.jpg",
    "http://images.cocodataset.org/train2017/000000010393.jpg",
    "http://images.cocodataset.org/train2017/000000084540.jpg",
    "http://images.cocodataset.org/train2017/000000007125.jpg",
    "http://images.cocodataset.org/train2017/000000507249.jpg",
    "http://images.cocodataset.org/train2017/000000075923.jpg",
    "http://images.cocodataset.org/train2017/000000240918.jpg",
    "http://images.cocodataset.org/train2017/000000122302.jpg",
    "http://images.cocodataset.org/train2017/000000140006.jpg",
    "http://images.cocodataset.org/train2017/000000536444.jpg",
    "http://images.cocodataset.org/train2017/000000344271.jpg",
    "http://images.cocodataset.org/train2017/000000420081.jpg",
    "http://images.cocodataset.org/train2017/000000148668.jpg",
    "http://images.cocodataset.org/train2017/000000390137.jpg",
    "http://images.cocodataset.org/train2017/000000114183.jpg",
    "http://images.cocodataset.org/train2017/000000020307.jpg",
    "http://images.cocodataset.org/train2017/000000280736.jpg",
    "http://images.cocodataset.org/train2017/000000536321.jpg",
    "http://images.cocodataset.org/train2017/000000188146.jpg",
    "http://images.cocodataset.org/train2017/000000559312.jpg",
    "http://images.cocodataset.org/train2017/000000535808.jpg",
    "http://images.cocodataset.org/train2017/000000451944.jpg",
    "http://images.cocodataset.org/train2017/000000212558.jpg",
    "http://images.cocodataset.org/train2017/000000377867.jpg",
    "http://images.cocodataset.org/train2017/000000139291.jpg",
    "http://images.cocodataset.org/train2017/000000456323.jpg",
    "http://images.cocodataset.org/train2017/000000549386.jpg",
    "http://images.cocodataset.org/train2017/000000254491.jpg",
    "http://images.cocodataset.org/train2017/000000314515.jpg",
    "http://images.cocodataset.org/train2017/000000415904.jpg",
    "http://images.cocodataset.org/train2017/000000101636.jpg",
    "http://images.cocodataset.org/train2017/000000315173.jpg",
    "http://images.cocodataset.org/train2017/000000260627.jpg",
    "http://images.cocodataset.org/train2017/000000001722.jpg",
    "http://images.cocodataset.org/train2017/000000031092.jpg",
    "http://images.cocodataset.org/train2017/000000556205.jpg",
    "http://images.cocodataset.org/train2017/000000049097.jpg",
    "http://images.cocodataset.org/train2017/000000070815.jpg",
    "http://images.cocodataset.org/train2017/000000467000.jpg",
    "http://images.cocodataset.org/train2017/000000416733.jpg",
    "http://images.cocodataset.org/train2017/000000203912.jpg",
    "http://images.cocodataset.org/train2017/000000408143.jpg",
    "http://images.cocodataset.org/train2017/000000120340.jpg",
    "http://images.cocodataset.org/train2017/000000124462.jpg",
    "http://images.cocodataset.org/train2017/000000142718.jpg",
    "http://images.cocodataset.org/train2017/000000108838.jpg",
    "http://images.cocodataset.org/train2017/000000445309.jpg",
    "http://images.cocodataset.org/train2017/000000140197.jpg",
    "http://images.cocodataset.org/train2017/000000012993.jpg",
    "http://images.cocodataset.org/train2017/000000111099.jpg",
    "http://images.cocodataset.org/train2017/000000215867.jpg",
    "http://images.cocodataset.org/train2017/000000565085.jpg",
    "http://images.cocodataset.org/train2017/000000314986.jpg",
    "http://images.cocodataset.org/train2017/000000158708.jpg",
    "http://images.cocodataset.org/train2017/000000263961.jpg",
    "http://images.cocodataset.org/train2017/000000192128.jpg",
    "http://images.cocodataset.org/train2017/000000377832.jpg",
    "http://images.cocodataset.org/train2017/000000187286.jpg",
    "http://images.cocodataset.org/train2017/000000195510.jpg",
    "http://images.cocodataset.org/train2017/000000406949.jpg",
    "http://images.cocodataset.org/train2017/000000330455.jpg",
]


LIST_OF_NON_BICYCLES = [
    "http://images.cocodataset.org/train2017/000000522418.jpg",
    "http://images.cocodataset.org/train2017/000000184613.jpg",
    "http://images.cocodataset.org/train2017/000000318219.jpg",
    "http://images.cocodataset.org/train2017/000000554625.jpg",
    "http://images.cocodataset.org/train2017/000000574769.jpg",
    "http://images.cocodataset.org/train2017/000000060623.jpg",
    "http://images.cocodataset.org/train2017/000000309022.jpg",
    "http://images.cocodataset.org/train2017/000000005802.jpg",
    "http://images.cocodataset.org/train2017/000000222564.jpg",
    "http://images.cocodataset.org/train2017/000000118113.jpg",
    "http://images.cocodataset.org/train2017/000000193271.jpg",
    "http://images.cocodataset.org/train2017/000000224736.jpg",
    "http://images.cocodataset.org/train2017/000000403013.jpg",
    "http://images.cocodataset.org/train2017/000000374628.jpg",
    "http://images.cocodataset.org/train2017/000000328757.jpg",
    "http://images.cocodataset.org/train2017/000000384213.jpg",
    "http://images.cocodataset.org/train2017/000000086408.jpg",
    "http://images.cocodataset.org/train2017/000000372938.jpg",
    "http://images.cocodataset.org/train2017/000000386164.jpg",
    "http://images.cocodataset.org/train2017/000000223648.jpg",
    "http://images.cocodataset.org/train2017/000000204805.jpg",
    "http://images.cocodataset.org/train2017/000000113588.jpg",
    "http://images.cocodataset.org/train2017/000000384553.jpg",
    "http://images.cocodataset.org/train2017/000000337264.jpg",
    "http://images.cocodataset.org/train2017/000000368402.jpg",
    "http://images.cocodataset.org/train2017/000000012448.jpg",
    "http://images.cocodataset.org/train2017/000000542145.jpg",
    "http://images.cocodataset.org/train2017/000000540186.jpg",
    "http://images.cocodataset.org/train2017/000000242611.jpg",
    "http://images.cocodataset.org/train2017/000000051191.jpg",
    "http://images.cocodataset.org/train2017/000000269105.jpg",
    "http://images.cocodataset.org/train2017/000000294832.jpg",
    "http://images.cocodataset.org/train2017/000000144941.jpg",
    "http://images.cocodataset.org/train2017/000000173350.jpg",
    "http://images.cocodataset.org/train2017/000000060760.jpg",
    "http://images.cocodataset.org/train2017/000000324266.jpg",
    "http://images.cocodataset.org/train2017/000000166532.jpg",
    "http://images.cocodataset.org/train2017/000000262284.jpg",
    "http://images.cocodataset.org/train2017/000000360772.jpg",
    "http://images.cocodataset.org/train2017/000000191381.jpg",
    "http://images.cocodataset.org/train2017/000000111076.jpg",
    "http://images.cocodataset.org/train2017/000000340559.jpg",
    "http://images.cocodataset.org/train2017/000000258985.jpg",
    "http://images.cocodataset.org/train2017/000000229643.jpg",
    "http://images.cocodataset.org/train2017/000000125059.jpg",
    "http://images.cocodataset.org/train2017/000000455483.jpg",
    "http://images.cocodataset.org/train2017/000000436141.jpg",
    "http://images.cocodataset.org/train2017/000000129001.jpg",
    "http://images.cocodataset.org/train2017/000000232262.jpg",
    "http://images.cocodataset.org/train2017/000000166323.jpg",
    "http://images.cocodataset.org/train2017/000000580041.jpg",
    "http://images.cocodataset.org/train2017/000000326781.jpg",
    "http://images.cocodataset.org/train2017/000000387362.jpg",
    "http://images.cocodataset.org/train2017/000000138079.jpg",
    "http://images.cocodataset.org/train2017/000000556616.jpg",
    "http://images.cocodataset.org/train2017/000000472621.jpg",
    "http://images.cocodataset.org/train2017/000000192440.jpg",
    "http://images.cocodataset.org/train2017/000000086320.jpg",
    "http://images.cocodataset.org/train2017/000000256668.jpg",
    "http://images.cocodataset.org/train2017/000000383445.jpg",
    "http://images.cocodataset.org/train2017/000000565797.jpg",
    "http://images.cocodataset.org/train2017/000000081922.jpg",
    "http://images.cocodataset.org/train2017/000000050125.jpg",
    "http://images.cocodataset.org/train2017/000000364521.jpg",
    "http://images.cocodataset.org/train2017/000000394892.jpg",
    "http://images.cocodataset.org/train2017/000000001146.jpg",
    "http://images.cocodataset.org/train2017/000000310391.jpg",
    "http://images.cocodataset.org/train2017/000000097434.jpg",
    "http://images.cocodataset.org/train2017/000000463836.jpg",
    "http://images.cocodataset.org/train2017/000000241876.jpg",
    "http://images.cocodataset.org/train2017/000000156832.jpg",
    "http://images.cocodataset.org/train2017/000000270721.jpg",
    "http://images.cocodataset.org/train2017/000000462341.jpg",
    "http://images.cocodataset.org/train2017/000000310103.jpg",
    "http://images.cocodataset.org/train2017/000000032992.jpg",
    "http://images.cocodataset.org/train2017/000000122851.jpg",
    "http://images.cocodataset.org/train2017/000000540763.jpg",
    "http://images.cocodataset.org/train2017/000000138246.jpg",
    "http://images.cocodataset.org/train2017/000000197254.jpg",
    "http://images.cocodataset.org/train2017/000000032907.jpg",
]

class URLImageDataset(Dataset):
    def __init__(self, image_urls, label, transform=None):
        self.image_urls = image_urls
        self.label = label
        self.transform = transform

    def __len__(self):
        return len(self.image_urls)

    def __getitem__(self, idx):
        url = self.image_urls[idx]
        try:
            response = requests.get(url)
            image = Image.open(BytesIO(response.content)).convert('RGB')
            if self.transform:
                image = self.transform(image)
            return image, self.label
        except Exception as e:
            print(f"Error loading image: {e}")
            return None, self.label

from sklearn.model_selection import train_test_split

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

bicycle_dataset = URLImageDataset(LIST_OF_BICYCLES, label=1, transform=transform)
non_bicycle_dataset = URLImageDataset(LIST_OF_NON_BICYCLES, label=0, transform=transform)
full_dataset = bicycle_dataset + non_bicycle_dataset

""" Train-test split"""

from torch.utils.data import Subset
import numpy as np

dataset_size = len(full_dataset)

indices = list(range(dataset_size))

np.random.seed(42)
np.random.shuffle(indices)

# For 60% train, 20% validation, 20% test
train_split = int(0.6 * dataset_size)
val_split = int(0.8 * dataset_size)

train_indices = indices[:train_split]
val_indices = indices[train_split:val_split]
test_indices = indices[val_split:]

train_dataset = Subset(full_dataset, train_indices)
val_dataset = Subset(full_dataset, val_indices)
test_dataset = Subset(full_dataset, test_indices)

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

""" Train """

def train_model(model, train_loader, val_loader, criterion, optimizer, epochs=5):
    model.train()
    for epoch in range(epochs):
        # Training Phase
        model.train()
        total_train_loss = 0
        for images, labels in tqdm(train_loader):
            images, labels = images.to('cuda'), labels.to('cuda')
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            total_train_loss += loss.item()

        # Validation Phase
        model.eval()
        total_val_loss = 0
        correct = 0
        total = 0
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to('cuda'), labels.to('cuda')
                outputs = model(images)
                loss = criterion(outputs, labels)
                total_val_loss += loss.item()
                _, predicted = torch.max(outputs, 1)
                correct += (predicted == labels).sum().item()
                total += labels.size(0)

        # Logging losses and accuracy
        train_loss = total_train_loss / len(train_loader)
        val_loss = total_val_loss / len(val_loader)
        val_accuracy = correct / total
        print(f"Epoch [{epoch+1}/{epochs}], Train Loss: {train_loss:.4f}, "
              f"Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.4f}")



""" Test """

from sklearn.metrics import accuracy_score
import torch.nn.functional as F

# Evaluation Function
def evaluate_model(model, dataloader):
    model.eval()  # Set model to evaluation mode
    all_labels = []
    all_predictions = []

    with torch.no_grad():  # No need to calculate gradients
        for images, labels in tqdm(dataloader):
            images = images.to('cuda')
            outputs = model(images)
            probabilities = F.softmax(outputs, dim=1)
            predictions = probabilities.argmax(dim=1).cpu().numpy()

            # Collect labels and predictions
            all_labels.extend(labels.numpy())
            all_predictions.extend(predictions)

    # Calculate accuracy
    accuracy = accuracy_score(all_labels, all_predictions)
    print(f"Test Accuracy: {accuracy * 100:.2f}%")
    return accuracy


""" ResNet """

# Load pretrained ResNet model
resnet18 = models.resnet18(pretrained=True)
resnet18.fc = nn.Linear(resnet18.fc.in_features, 2)  # Modify the final layer for binary classification
model = resnet18.to('cuda' if torch.cuda.is_available() else 'cpu')

# Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(resnet18.parameters(), lr=0.001)

# Train the model
train_model(resnet18, train_loader, val_loader, criterion, optimizer, epochs=5)
accuracy = evaluate_model(resnet18, test_loader)

""" Efficient Net"""

import torchvision.models as models

model = models.efficientnet_b7(pretrained=True)
model.classifier[1] = nn.Linear(model.classifier[1].in_features, 2)  # Modify for binary classification
model = model.to('cuda' if torch.cuda.is_available() else 'cpu')

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

train_model(model, train_loader, val_loader, criterion, optimizer, epochs=5)

accuracy = evaluate_model(model, test_loader)

""" MobileNetV2 """

mobile_netv2 = models.mobilenet_v2(pretrained=True)
mobile_netv2.classifier[1] = nn.Linear(mobile_netv2.classifier[1].in_features, 2)  # Modify for binary classification
mobile_netv2 = mobile_netv2.to('cuda' if torch.cuda.is_available() else 'cpu')

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(mobile_netv2.parameters(), lr=0.001)

train_model(mobile_netv2, train_loader, val_loader, criterion, optimizer, epochs=5)

accuracy = evaluate_model(mobile_netv2, test_loader)
